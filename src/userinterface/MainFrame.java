package userinterface;

import courses.Course;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.CaretEvent;
import javax.swing.text.BadLocationException;
import org.fife.rsta.ui.GoToDialog;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import editorfunctions.FindText;
import java.awt.Image;
import javax.imageio.ImageIO;
import fileoperations.ContentReader;
import fileoperations.FileExtension;
import java.util.TreeSet;
import settings.Settings;
import user.Instructor;
import static user.Instructor.courses;
import user.Student;

/**
 *
 * @author xperiaW
 */
public class MainFrame extends javax.swing.JFrame {

    public static final String TITLE = "SimpleTextEditor";
    private JFileChooser fileSaver;
    private File currentFile = null;
    public boolean isUserConfigured = false;
    public String userType = "";
    public Student student = new Student();
    public Instructor instructor = new Instructor();

    public MainFrame() throws UnsupportedLookAndFeelException {
        initComponents();

        try {
            Image i = ImageIO.read(getClass().getResource("/images/icon.png"));
            setIconImage(i);
        } catch (IOException e) {
            e.getMessage();
        }

        rTextScrollPane.setLineNumbersEnabled(true);
        rTextScrollPane.setFoldIndicatorEnabled(true);
        setTitle(TITLE + " - Untitled");

        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(size);

        textArea.setBracketMatchingEnabled(true);
        textArea.setCodeFoldingEnabled(true);
        textArea.setCloseCurlyBraces(true);

        labelTabsize.setText("Tab Size " + textArea.getTabSize() + "  | ");

        textArea.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                getLineColNo();
            }
        });

        textArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e1) {
                if (!textArea.equals("")) {
                    try {
                        setTitle(TITLE + " - " + currentFile.getAbsolutePath() + " * ");
                    } catch (NullPointerException e) {
                        e.getMessage();

                    }
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e2) {
                if (!textArea.equals("")) {
                    try {
                        setTitle(TITLE + " - " + currentFile.getAbsolutePath() + " * ");
                    } catch (NullPointerException e) {
                        e.getMessage();
                    }
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e3) {
                if (!textArea.equals("")) {
                    try {
                        setTitle(TITLE + " - " + currentFile.getAbsolutePath() + " * ");
                    } catch (NullPointerException e) {
                        e.getMessage();
                    }
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSyntaxTextAreaHighlighter1 = new org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaHighlighter();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem2 = new javax.swing.JMenuItem();
        rTextScrollPane = new org.fife.ui.rtextarea.RTextScrollPane();
        textArea = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        statusbarPanel = new javax.swing.JPanel();
        labelLineNo = new javax.swing.JLabel();
        labelFileType = new javax.swing.JLabel();
        labelTabsize = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        menuNewFile = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        menuCreateProject = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuNewWindow = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuCloseFile = new javax.swing.JMenuItem();
        menuQuit = new javax.swing.JMenuItem();
        MenuEdit = new javax.swing.JMenu();
        MenuItemUndo = new javax.swing.JMenuItem();
        MenuItemRedo = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        MenuItemCOpy = new javax.swing.JMenuItem();
        MenuItemCut = new javax.swing.JMenuItem();
        MenuItemPaste = new javax.swing.JMenuItem();
        MenuView = new javax.swing.JMenu();
        lineNumberCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        statusBarCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        lineHighlightCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        wrapTextCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        MenuUser = new javax.swing.JMenu();
        createUserMenuItem = new javax.swing.JMenuItem();
        userInfoMenuItem = new javax.swing.JMenuItem();
        searchMenu = new javax.swing.JMenu();
        gotoMenuItem = new javax.swing.JMenuItem();
        findMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setTabSize(4);
        textArea.setCodeFoldingEnabled(true);
        textArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAreaKeyTyped(evt);
            }
        });
        rTextScrollPane.setViewportView(textArea);

        labelLineNo.setText("Line 0 Col 0");

        labelFileType.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelFileType.setText("Plain Text");

        labelTabsize.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelTabsize.setText("Tab Size  |");

        javax.swing.GroupLayout statusbarPanelLayout = new javax.swing.GroupLayout(statusbarPanel);
        statusbarPanel.setLayout(statusbarPanelLayout);
        statusbarPanelLayout.setHorizontalGroup(
            statusbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusbarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelLineNo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 362, Short.MAX_VALUE)
                .addComponent(labelTabsize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelFileType)
                .addGap(30, 30, 30))
        );
        statusbarPanelLayout.setVerticalGroup(
            statusbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusbarPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusbarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLineNo)
                    .addComponent(labelFileType)
                    .addComponent(labelTabsize))
                .addContainerGap())
        );

        MenuFile.setText("File");

        menuNewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNewFile.setText("New");
        menuNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewFileActionPerformed(evt);
            }
        });
        MenuFile.add(menuNewFile);

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setText("Open");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        MenuFile.add(menuOpen);

        menuCreateProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        menuCreateProject.setText("Create Project");
        menuCreateProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCreateProjectActionPerformed(evt);
            }
        });
        MenuFile.add(menuCreateProject);
        MenuFile.add(jSeparator1);

        jMenuItem5.setText("Create Folder");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        MenuFile.add(jMenuItem5);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Save");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        MenuFile.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Save As");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        MenuFile.add(jMenuItem4);
        MenuFile.add(jSeparator2);

        menuNewWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuNewWindow.setText("New Window");
        menuNewWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewWindowActionPerformed(evt);
            }
        });
        MenuFile.add(menuNewWindow);
        MenuFile.add(jSeparator3);

        menuCloseFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuCloseFile.setText("Close File");
        menuCloseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCloseFileActionPerformed(evt);
            }
        });
        MenuFile.add(menuCloseFile);

        menuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuQuit.setText("Quit");
        menuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuQuitActionPerformed(evt);
            }
        });
        MenuFile.add(menuQuit);

        jMenuBar1.add(MenuFile);

        MenuEdit.setText("Edit");

        MenuItemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemUndo.setText("Undo");
        MenuItemUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemUndoActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemUndo);

        MenuItemRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemRedo.setText("Redo");
        MenuItemRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemRedoActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemRedo);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Select All");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        MenuEdit.add(jMenuItem1);
        MenuEdit.add(jSeparator4);

        MenuItemCOpy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemCOpy.setText("Copy");
        MenuItemCOpy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCOpyActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemCOpy);

        MenuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemCut.setText("Cut");
        MenuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCutActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemCut);

        MenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemPaste.setText("Paste");
        MenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemPasteActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemPaste);

        jMenuBar1.add(MenuEdit);

        MenuView.setText("View");

        lineNumberCheckBoxMenuItem.setSelected(true);
        lineNumberCheckBoxMenuItem.setText("Show Line Number");
        lineNumberCheckBoxMenuItem.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineNumberCheckBoxMenuItemStateChanged(evt);
            }
        });
        lineNumberCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineNumberCheckBoxMenuItemActionPerformed(evt);
            }
        });
        MenuView.add(lineNumberCheckBoxMenuItem);

        statusBarCheckBoxMenuItem.setSelected(true);
        statusBarCheckBoxMenuItem.setText("Show Status Bar");
        statusBarCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                statusBarCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        MenuView.add(statusBarCheckBoxMenuItem);

        lineHighlightCheckBoxMenuItem.setSelected(true);
        lineHighlightCheckBoxMenuItem.setText("Show Line Highlighting");
        lineHighlightCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineHighlightCheckBoxMenuItemActionPerformed(evt);
            }
        });
        MenuView.add(lineHighlightCheckBoxMenuItem);
        MenuView.add(jSeparator5);

        wrapTextCheckBoxMenuItem.setText("Wrap Text");
        wrapTextCheckBoxMenuItem.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                wrapTextCheckBoxMenuItemStateChanged(evt);
            }
        });
        MenuView.add(wrapTextCheckBoxMenuItem);

        jMenuBar1.add(MenuView);

        MenuUser.setText("User");

        createUserMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        createUserMenuItem.setText("Create User");
        createUserMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserMenuItemActionPerformed(evt);
            }
        });
        MenuUser.add(createUserMenuItem);

        userInfoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        userInfoMenuItem.setText("User Info");
        userInfoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userInfoMenuItemActionPerformed(evt);
            }
        });
        MenuUser.add(userInfoMenuItem);

        jMenuBar1.add(MenuUser);

        searchMenu.setText("Search");

        gotoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        gotoMenuItem.setText("Go To Line");
        gotoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gotoMenuItemActionPerformed(evt);
            }
        });
        searchMenu.add(gotoMenuItem);

        findMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        findMenuItem.setText("Find");
        findMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMenuItemActionPerformed(evt);
            }
        });
        searchMenu.add(findMenuItem);

        jMenuBar1.add(searchMenu);

        helpMenu.setText("Help");

        aboutItem.setText("About");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rTextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(statusbarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(rTextScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusbarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setBounds(0, 0, 667, 489);
    }// </editor-fold>//GEN-END:initComponents

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        openFile();
    }//GEN-LAST:event_menuOpenActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        saveFile();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void menuNewWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewWindowActionPerformed
        try {
            new MainFrame().setVisible(true);
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_menuNewWindowActionPerformed

    private void menuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuQuitActionPerformed
        dispose();
    }//GEN-LAST:event_menuQuitActionPerformed

    private void menuNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewFileActionPerformed
        textArea.setText("");
        setTitle(TITLE + " - Untitled");
        currentFile = null;
        setSyntax("txt");
    }//GEN-LAST:event_menuNewFileActionPerformed

    private void MenuItemRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemRedoActionPerformed
        textArea.redoLastAction();
    }//GEN-LAST:event_MenuItemRedoActionPerformed

    private void MenuItemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemUndoActionPerformed
        textArea.undoLastAction();
    }//GEN-LAST:event_MenuItemUndoActionPerformed

    private void MenuItemCOpyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCOpyActionPerformed
        textArea.copy();
    }//GEN-LAST:event_MenuItemCOpyActionPerformed

    private void MenuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCutActionPerformed
        textArea.cut();
    }//GEN-LAST:event_MenuItemCutActionPerformed

    private void MenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemPasteActionPerformed
        textArea.paste();

    }//GEN-LAST:event_MenuItemPasteActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        textArea.selectAll();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void wrapTextCheckBoxMenuItemStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_wrapTextCheckBoxMenuItemStateChanged
        if (wrapTextCheckBoxMenuItem.isSelected()) {
            textArea.setLineWrap(true);
        } else {
            textArea.setLineWrap(false);
        }
    }//GEN-LAST:event_wrapTextCheckBoxMenuItemStateChanged

    private void statusBarCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statusBarCheckBoxMenuItemItemStateChanged
        statusbarPanel.setVisible(statusBarCheckBoxMenuItem.isSelected());
    }//GEN-LAST:event_statusBarCheckBoxMenuItemItemStateChanged

    private void lineNumberCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineNumberCheckBoxMenuItemActionPerformed

    }//GEN-LAST:event_lineNumberCheckBoxMenuItemActionPerformed

    private void lineNumberCheckBoxMenuItemStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lineNumberCheckBoxMenuItemStateChanged
        rTextScrollPane.setLineNumbersEnabled(lineNumberCheckBoxMenuItem.isSelected());
    }//GEN-LAST:event_lineNumberCheckBoxMenuItemStateChanged

    private void gotoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gotoMenuItemActionPerformed
        GoToDialog dialog = new GoToDialog(this);
        dialog.setMaxLineNumberAllowed(textArea.getLineCount());
        dialog.setVisible(true);
        int line = dialog.getLineNumber();
        if (line > 0) {
            try {
                textArea.setCaretPosition(textArea.getLineStartOffset(line - 1));
            } catch (BadLocationException ex) {
                UIManager.getLookAndFeel().provideErrorFeedback(textArea);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_gotoMenuItemActionPerformed

    private void textAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyTyped

    }//GEN-LAST:event_textAreaKeyTyped

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        saveAs();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void menuCloseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCloseFileActionPerformed
        int val = JOptionPane.showConfirmDialog(this, "Do you want to close the file?", "Confirm?", JOptionPane.OK_CANCEL_OPTION);
        if (val == 0) {
            textArea.setText("");
            setTitle(TITLE + " -  Untitled");
            currentFile = null;
        }
    }//GEN-LAST:event_menuCloseFileActionPerformed

    private void findMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMenuItemActionPerformed
        new FindText(this, false).setVisible(true);
    }//GEN-LAST:event_findMenuItemActionPerformed

    private void lineHighlightCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineHighlightCheckBoxMenuItemActionPerformed
        textArea.setHighlightCurrentLine(lineHighlightCheckBoxMenuItem.isSelected());
    }//GEN-LAST:event_lineHighlightCheckBoxMenuItemActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        showPlainMessageDialog("About", TITLE + " v0.1");
    }//GEN-LAST:event_aboutItemActionPerformed

    private void menuCreateProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCreateProjectActionPerformed
        if (!isUserConfigured) {
            showPlainMessageDialog("Error", "You have to create a user profile before creating a project.");
        } else {

            createProject();

        }
    }//GEN-LAST:event_menuCreateProjectActionPerformed

    private void createUserMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserMenuItemActionPerformed
        if (!isUserConfigured) {
            new CreateUserFrame(this).setVisible(true);
        } else {
            showPlainMessageDialog("Error", "You already have a profile.");
        }

    }//GEN-LAST:event_createUserMenuItemActionPerformed

    private void userInfoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userInfoMenuItemActionPerformed
        if (!isUserConfigured) {
            showPlainMessageDialog("Error", "You don't have a user profile.");
        } else {

            if (userType == "Instructor") {
                coursesFrame t = new coursesFrame();

                String res = "";
                for (Course g : courses) {
                    res += g.toString() + "\n\n";
                }
                t.setDisplayT(res);
                t.setVisible(true);

                showPlainMessageDialog("User Profile", "\nUser Type: " + userType
                        + "\nUser Name:" + instructor.getName()
                        + "\nUser ID:" + instructor.getID());

            } else if (userType == "Student") {
                showPlainMessageDialog("User Profile", "\nUser Type: " + userType
                        + "\nUser Name:" + student.getName()
                        + "\nUser ID:" + student.getID());
            }

        }
    }//GEN-LAST:event_userInfoMenuItemActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainFrame().setVisible(true);
                } catch (UnsupportedLookAndFeelException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MenuEdit;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenuItem MenuItemCOpy;
    private javax.swing.JMenuItem MenuItemCut;
    private javax.swing.JMenuItem MenuItemPaste;
    private javax.swing.JMenuItem MenuItemRedo;
    private javax.swing.JMenuItem MenuItemUndo;
    private javax.swing.JMenu MenuUser;
    private javax.swing.JMenu MenuView;
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem createUserMenuItem;
    private javax.swing.JMenuItem findMenuItem;
    private javax.swing.JMenuItem gotoMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JLabel labelFileType;
    private javax.swing.JLabel labelLineNo;
    private javax.swing.JLabel labelTabsize;
    private javax.swing.JCheckBoxMenuItem lineHighlightCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem lineNumberCheckBoxMenuItem;
    private javax.swing.JMenuItem menuCloseFile;
    private javax.swing.JMenuItem menuCreateProject;
    private javax.swing.JMenuItem menuNewFile;
    private javax.swing.JMenuItem menuNewWindow;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuQuit;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaHighlighter rSyntaxTextAreaHighlighter1;
    private org.fife.ui.rtextarea.RTextScrollPane rTextScrollPane;
    private javax.swing.JMenu searchMenu;
    private javax.swing.JCheckBoxMenuItem statusBarCheckBoxMenuItem;
    private javax.swing.JPanel statusbarPanel;
    public static org.fife.ui.rsyntaxtextarea.RSyntaxTextArea textArea;
    private javax.swing.JMenuItem userInfoMenuItem;
    private javax.swing.JCheckBoxMenuItem wrapTextCheckBoxMenuItem;
    // End of variables declaration//GEN-END:variables

    private void showPlainMessageDialog(String title, String content) {
        JOptionPane.showMessageDialog(this,
                content,
                title,
                JOptionPane.PLAIN_MESSAGE);
    }

    private void openFile() {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Open File");
        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            currentFile = fc.getSelectedFile();
            String fileName = currentFile.getName();

            setSyntax(getFileExtension(fileName));

            setTitle(TITLE + " - " + currentFile.getAbsolutePath());
            textArea.setText(ContentReader.readFile(currentFile));
            textArea.setCaretPosition(0);

        }

    }

    private void setSyntax(String file_extension) {
        String ext = file_extension;
        String syntaxStyle = "";

        switch (ext) {
            case "java":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_JAVA;
                break;

            case "html":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_HTML;
                break;

            case "php":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_PHP;
                break;

            case "js":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT;
                break;

            case "c":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_C;
                break;

            case "py":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_PYTHON;
                break;

            case "sql":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_SQL;
                break;

            case "css":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_CSS;
                break;

            case "cpp":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_CPLUSPLUS;
                break;

            case "json":
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_JSON;
                break;

            default:
                ext = "txt";
                syntaxStyle = SyntaxConstants.SYNTAX_STYLE_NONE;
                break;
        }

        if (ext.equalsIgnoreCase("html")) {
            textArea.setCloseMarkupTags(true);

        }

        textArea.setCloseCurlyBraces(true);

        textArea.setSyntaxEditingStyle(syntaxStyle);

    }

    /*
    
    https://stackoverflow.com/questions/12503221/get-file-extension-in-java/14091663#14091663    
    
     */
    private String getFileExtension(String filename) {
        if (filename == null) {
            return null;
        }
        int lastUnixPos = filename.lastIndexOf('/');
        int lastWindowsPos = filename.lastIndexOf('\\');
        int indexOfLastSeparator = Math.max(lastUnixPos, lastWindowsPos);
        int extensionPos = filename.lastIndexOf('.');
        int lastSeparator = indexOfLastSeparator;
        int indexOfExtension = lastSeparator > extensionPos ? -1 : extensionPos;
        int index = indexOfExtension;
        if (index == -1) {
            return "";
        } else {
            labelFileType.setText(FileExtension.getFileType(filename.substring(index + 1)));
            return filename.substring(index + 1);

        }
    }

    private void saveFile() {
        if (currentFile != null) {
            try {

                setSyntax(getFileExtension(currentFile.toString()));
                setTitle(TITLE + " - " + currentFile.getAbsolutePath());
                FileWriter fw = new FileWriter(currentFile);
                fw.write(textArea.getText());
                fw.close();
                setTitle(TITLE + " - " + currentFile.getAbsolutePath());

            } catch (IOException e) {
                e.printStackTrace();
            }

        } else {
            fileSaver = new JFileChooser();
            fileSaver.setDialogTitle("Save File");
            int returnVal = fileSaver.showSaveDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    currentFile = fileSaver.getSelectedFile();

                    setSyntax(getFileExtension(currentFile.toString()));
                    setTitle(TITLE + " -.- " + currentFile.getAbsolutePath());
                    FileWriter fw = new FileWriter(currentFile);
                    fw.write(textArea.getText());
                    fw.close();
                    setTitle(TITLE + "- . - " + currentFile.getAbsolutePath());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }

    }

    private void getLineColNo() {
        int colCount = textArea.getCaretPosition();
        int lineCount = textArea.getCaretLineNumber() + 1;
        labelLineNo.setText("Line " + lineCount + " " + "Col " + colCount);

    }

    private void saveAs() {
        fileSaver = new JFileChooser();
        fileSaver.setDialogTitle("Save As");
        int returnVal = fileSaver.showSaveDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                currentFile = fileSaver.getSelectedFile();

                setSyntax(getFileExtension(currentFile.toString()));
                setTitle(TITLE + " - " + currentFile.getAbsolutePath());
                FileWriter fw = new FileWriter(currentFile);
                fw.write(textArea.getText());
                fw.close();
                setTitle(TITLE + " - " + currentFile.getAbsolutePath());
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }

    private void createProject() {

        String rootPath = Settings.rootPath;
        String constructedPath = "C:\\" + rootPath + "\\";
        new File(constructedPath).mkdir();

        if (userType == "Student") {
            new File(constructedPath + "Student\\" + student.getName()).mkdirs();
            for (String folder : student.getFolders()) {
                new File(constructedPath + "Student\\" + student.getName()
                        + "\\" + folder).mkdir();
            }
        } else if (userType == "Instructor") {
            new File(constructedPath + "Instructor\\" + instructor.getName()).mkdirs();
            for (String folder : instructor.getFolders()) {
                new File(constructedPath + "Instructor\\" + instructor.getName()
                        + "\\" + folder).mkdir();
            }
        }

        showPlainMessageDialog("Project", "Project folders are created.");

    }

    public static RSyntaxTextArea getArea() {
        return textArea;
    }

}
